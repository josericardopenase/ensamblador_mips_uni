Messages
=========================
SPIM Version 8.0 of January 8, 2010
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
DOS and Windows ports by David A. Carley.
Copyright 1997, Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Loaded: C:\users\pepe\Escritorio\assambly\ensamblador_mips_uni\Ejercicios asm uni\Intento1_interrupciones\exceptions.s
Memory and registers cleared and the simulator reinitialized.

SPIM Version 8.0 of January 8, 2010
Copyright 1990-2010, James R. Larus.
All Rights Reserved.
DOS and Windows ports by David A. Carley.
Copyright 1997, Morgan Kaufmann Publishers, Inc.
See the file README for a full copyright notice.
Loaded: C:\users\pepe\Escritorio\assambly\ensamblador_mips_uni\Ejercicios asm uni\Intento1_interrupciones\exceptions.s
C:\users\pepe\Escritorio\assambly\ensamblador_mips_uni\Ejercicios asm uni\Intento1_interrupciones\intento1.asm successfully loaded
Attempt to execute non-instruction at 0x00400028
Attempt to execute non-instruction at 0x00400028


Registers
=========================
 PC      = 00400018   EPC     = 00000000   Cause   = 00000000   BadVAddr= 00000000
 Status  = 3000ff11   HI      = 00000000   LO      = 00000000
                                 General Registers
R0  (r0) = 00000000  R8  (t0) = 00000000  R16 (s0) = 00000000  R24 (t8) = 00000000
R1  (at) = 00000000  R9  (t1) = 00000000  R17 (s1) = 00000002  R25 (t9) = 00000000
R2  (v0) = 00000000  R10 (t2) = 00000000  R18 (s2) = 00000000  R26 (k0) = 00000000
R3  (v1) = 00000000  R11 (t3) = 00000000  R19 (s3) = 00000000  R27 (k1) = 00000000
R4  (a0) = 00000000  R12 (t4) = 00000000  R20 (s4) = 00000000  R28 (gp) = 10008000
R5  (a1) = 00000000  R13 (t5) = 00000000  R21 (s5) = 00000000  R29 (sp) = 7ffff3a0
R6  (a2) = 7ffff3a8  R14 (t6) = 00000000  R22 (s6) = 00000000  R30 (s8) = 00000000
R7  (a3) = ffff0000  R15 (t7) = 00000000  R23 (s7) = 00000000  R31 (ra) = 00400018

 FIR    = 00009800    FCSR    = 00000000    FCCR   = 00000000   FEXR    = 00000000
 FENR   = 00000000
                              Double Floating Point Registers
FP0 =00000000,00000000 FP8 =00000000,00000000 FP16=00000000,00000000 FP24=00000000,00000000
FP2 =00000000,00000000 FP10=00000000,00000000 FP18=00000000,00000000 FP26=00000000,00000000
FP4 =00000000,00000000 FP12=00000000,00000000 FP20=00000000,00000000 FP28=00000000,00000000
FP6 =00000000,00000000 FP14=00000000,00000000 FP22=00000000,00000000 FP30=00000000,00000000
                              Single Floating Point Registers
FP0 =00000000 FP8 =00000000 FP16=00000000 FP24=00000000
FP1 =00000000 FP9 =00000000 FP17=00000000 FP25=00000000
FP2 =00000000 FP10=00000000 FP18=00000000 FP26=00000000
FP3 =00000000 FP11=00000000 FP19=00000000 FP27=00000000
FP4 =00000000 FP12=00000000 FP20=00000000 FP28=00000000
FP5 =00000000 FP13=00000000 FP21=00000000 FP29=00000000
FP6 =00000000 FP14=00000000 FP22=00000000 FP30=00000000
FP7 =00000000 FP15=00000000 FP23=00000000 FP31=00000000


Console
=========================


Text Segment
=========================
[0x00400000]        0x40116000  mfc0 $17, $12                   ; 18: mfc0    $s1, $12
[0x00400004]        0x3631ff01  ori $17, $17, -255              ; 19: ori     $s1, 0x0000ff01
[0x00400008]        0x40916000  mtc0 $17, $12                   ; 20: mtc0    $s1, $12
[0x0040000c]        0x0c100006  jal 0x00400018 [KbdIntrEnable]  ; 22: jal KbdIntrEnable
[0x00400010]        0x0c100005  jal 0x00400014 [bucle]          ; 24: jal bucle
[0x00400014]        0x08100005  j 0x00400014 [bucle]            ; 31: j bucle
[0x00400018]        0x3c07ffff  lui $7, -1                      ; 35: li $a3, 0xffff0000 
[0x0040001c]        0x34110002  ori $17, $0, 2                  ; 36: li $s1, 2
[0x00400020]        0xacf10000  sw $17, 0($7)                   ; 37: sw $s1, 0($a3)
[0x00400024]        0x03e00008  jr $31                          ; 39: jr $ra

        KERNEL
[0x80000180]        0x0001d821  addu $27, $0, $1                ; 90: move $k1 $at                # Save $at
[0x80000184]        0x3c019000  lui $1, -28672                  ; 92: sw $v0 s1                # Not re-entrant and we can't trust $sp
[0x80000188]        0xac220200  sw $2, 512($1)
[0x8000018c]        0x3c019000  lui $1, -28672                  ; 93: sw $a0 s2                # But we need to use these registers
[0x80000190]        0xac240204  sw $4, 516($1)
[0x80000194]        0x401a6800  mfc0 $26, $13                   ; 95: mfc0 $k0 $13                # Cause register
[0x80000198]        0x001a2082  srl $4, $26, 2                  ; 96: srl $a0 $k0 2                # Extract ExcCode Field
[0x8000019c]        0x3084001f  andi $4, $4, 31                 ; 97: andi $a0 $a0 0x1f
[0x800001a0]        0x34020004  ori $2, $0, 4                   ; 101: li $v0 4                # syscall 4 (print_str)
[0x800001a4]        0x3c049000  lui $4, -28672 [__m1_]          ; 102: la $a0 __m1_
[0x800001a8]        0x0000000c  syscall                         ; 103: syscall
[0x800001ac]        0x34020001  ori $2, $0, 1                   ; 105: li $v0 1                # syscall 1 (print_int)
[0x800001b0]        0x001a2082  srl $4, $26, 2                  ; 106: srl $a0 $k0 2                # Extract ExcCode Field
[0x800001b4]        0x3084001f  andi $4, $4, 31                 ; 107: andi $a0 $a0 0x1f
[0x800001b8]        0x0000000c  syscall                         ; 108: syscall
[0x800001bc]        0x34020004  ori $2, $0, 4                   ; 110: li $v0 4                # syscall 4 (print_str)
[0x800001c0]        0x3344003c  andi $4, $26, 60                ; 111: andi $a0 $k0 0x3c
[0x800001c4]        0x3c019000  lui $1, -28672                  ; 112: lw $a0 __excp($a0)
[0x800001c8]        0x00240821  addu $1, $1, $4
[0x800001cc]        0x8c240180  lw $4, 384($1)
[0x800001d0]        0x00000000  nop                             ; 113: nop
[0x800001d4]        0x0000000c  syscall                         ; 114: syscall
[0x800001d8]        0x34010018  ori $1, $0, 24                  ; 116: bne $k0 0x18 ok_pc        # Bad PC exception requires special checks
[0x800001dc]        0x143a0007  bne $1, $26, 28 [ok_pc-0x800001dc]
[0x800001e0]        0x00000000  nop                             ; 117: nop
[0x800001e4]        0x40047000  mfc0 $4, $14                    ; 119: mfc0 $a0 $14                # EPC
[0x800001e8]        0x30840003  andi $4, $4, 3                  ; 120: andi $a0 $a0 0x3        # Is EPC word-aligned?
[0x800001ec]        0x10040003  beq $0, $4, 12 [ok_pc-0x800001ec]; 121: beq $a0 0 ok_pc
[0x800001f0]        0x00000000  nop                             ; 122: nop
[0x800001f4]        0x3402000a  ori $2, $0, 10                  ; 124: li $v0 10                # Exit on really bad PC
[0x800001f8]        0x0000000c  syscall                         ; 125: syscall
[0x800001fc]        0x34020004  ori $2, $0, 4                   ; 128: li $v0 4                # syscall 4 (print_str)
[0x80000200]        0x3c019000  lui $1, -28672 [__m2_]          ; 129: la $a0 __m2_
[0x80000204]        0x3424000d  ori $4, $1, 13 [__m2_]
[0x80000208]        0x0000000c  syscall                         ; 130: syscall
[0x8000020c]        0x001a2082  srl $4, $26, 2                  ; 132: srl $a0 $k0 2                # Extract ExcCode Field
[0x80000210]        0x3084001f  andi $4, $4, 31                 ; 133: andi $a0 $a0 0x1f
[0x80000214]        0x14040000  bne $0, $4, 0 [ret-0x80000214]  ; 134: bne $a0 0 ret                # 0 means exception was an interrupt
[0x80000218]        0x401a7000  mfc0 $26, $14                   ; 148: mfc0 $k0 $14                # Bump EPC register
[0x8000021c]        0x275a0004  addiu $26, $26, 4               ; 149: addiu $k0 $k0 4                # Skip faulting instruction
[0x80000220]        0x409a7000  mtc0 $26, $14                   ; 151: mtc0 $k0 $14
[0x80000224]        0x3c019000  lui $1, -28672                  ; 156: lw $v0 s1                # Restore other registers
[0x80000228]        0x8c220200  lw $2, 512($1)
[0x8000022c]        0x3c019000  lui $1, -28672                  ; 157: lw $a0 s2
[0x80000230]        0x8c240204  lw $4, 516($1)
[0x80000234]        0x001b0821  addu $1, $0, $27                ; 160: move $at $k1                # Restore $at
[0x80000238]        0x40806800  mtc0 $0, $13                    ; 163: mtc0 $0 $13                # Clear Cause register
[0x8000023c]        0x401a6000  mfc0 $26, $12                   ; 165: mfc0 $k0 $12                # Set Status register
[0x80000240]        0x375a0001  ori $26, $26, 1                 ; 166: ori  $k0 0x1                # Interrupts enabled
[0x80000244]        0x409a6000  mtc0 $26, $12                   ; 167: mtc0 $k0 $12
[0x80000248]        0x00000000  nop                             ; 169: nop


Data Segment
=========================
        DATA
[0x10000000]...[0x10010000]        0x00000000
[0x10010000]                        0x00006f6e  0x00000000  0x00000000  0x00000000
[0x10010010]...[0x10040000]        0x00000000

        STACK

        KERNEL DATA
[0x90000000]                        0x78452020  0x74706563  0x206e6f69  0x636f2000
[0x90000010]                        0x72727563  0x61206465  0x6920646e  0x726f6e67
[0x90000020]                        0x000a6465  0x495b2020  0x7265746e  0x74707572
[0x90000030]                        0x2000205d  0x4c545b20  0x20005d42  0x4c545b20
[0x90000040]                        0x20005d42  0x4c545b20  0x20005d42  0x64415b20
[0x90000050]                        0x73657264  0x72652073  0x20726f72  0x69206e69
[0x90000060]                        0x2f74736e  0x61746164  0x74656620  0x205d6863
[0x90000070]                        0x5b202000  0x72646441  0x20737365  0x6f727265
[0x90000080]                        0x6e692072  0x6f747320  0x205d6572  0x5b202000
[0x90000090]                        0x20646142  0x74736e69  0x74637572  0x206e6f69
[0x900000a0]                        0x72646461  0x5d737365  0x20200020  0x6461425b
[0x900000b0]                        0x74616420  0x64612061  0x73657264  0x00205d73
[0x900000c0]                        0x455b2020  0x726f7272  0x206e6920  0x63737973
[0x900000d0]                        0x5d6c6c61  0x20200020  0x6572425b  0x6f706b61
[0x900000e0]                        0x5d746e69  0x20200020  0x7365525b  0x65767265
[0x900000f0]                        0x6e692064  0x75727473  0x6f697463  0x00205d6e
[0x90000100]                        0x5b202000  0x74697241  0x74656d68  0x6f206369
[0x90000110]                        0x66726576  0x5d776f6c  0x20200020  0x6172545b
[0x90000120]                        0x00205d70  0x5b202000  0x616f6c46  0x676e6974
[0x90000130]                        0x696f7020  0x205d746e  0x20000000  0x6f435b20
[0x90000140]                        0x636f7270  0x005d3220  0x20000000  0x444d5b20
[0x90000150]                        0x005d584d  0x575b2020  0x68637461  0x2020005d
[0x90000160]                        0x63614d5b  0x656e6968  0x65686320  0x005d6b63
[0x90000170]                        0x00000000  0x5b202000  0x68636143  0x00005d65
[0x90000180]                        0x90000024  0x90000033  0x9000003b  0x90000043
[0x90000190]                        0x9000004b  0x90000071  0x9000008d  0x900000aa
[0x900001a0]                        0x900000c0  0x900000d6  0x900000e6  0x90000100
[0x900001b0]                        0x90000101  0x9000011a  0x90000124  0x90000125
[0x900001c0]                        0x90000139  0x9000013a  0x9000013b  0x90000148
[0x900001d0]                        0x90000149  0x9000014a  0x9000014b  0x90000154
[0x900001e0]                        0x9000015e  0x90000170  0x90000171  0x90000172
[0x900001f0]                        0x90000173  0x90000174  0x90000175  0x9000017f
[0x90000200]...[0x90010000]        0x00000000


